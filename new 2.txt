globals
[
  grid-x-inc               ;; the amount of patches in between two roads in the x direction
  grid-y-inc               ;; the amount of patches in between two roads in the y direction
  grid-size-x
  grid-size-y
  grid-x-inc2               ;; the amount of patches in between two roads in the x direction
  grid-y-inc2               ;; the amount of patches in between two roads in the y direction
  grid-size-x2
  grid-size-y2
  acceleration             ;; the constant that controls how much a car speeds up or slows down by if
                           ;; it is to accelerate or decelerate
  phase                    ;; keeps track of the phase
  num-cars-stopped         ;; the number of cars that are stopped during a single pass thru the go procedure
  current-light            ;; the currently selected light


  ;; patch agentsets
  intersections ;; agentset containing the patches that are intersections
  roads         ;; agentset containing the patches that are roads
  ticks-per-cycle
  speed-limit
  count-reached
]

turtles-own
[
  speed     ;; the speed of the turtle
  wait-time ;; the amount of time since the last time a turtle has moved
  hasGPS?  ;; is turtle GPS-enabled?
  up-car?
  tempY
  reached-destination
  direction
]

patches-own
[
  intersection?   ;; true if the patch is at the intersection of two roads
  green-light-up? ;; true if the green light is above the intersection.  otherwise, false.
                  ;; false for a non-intersection patches.
  my-row          ;; the row of the intersection counting from the upper left corner of the
                  ;; world.  -1 for non-intersection patches.
  my-column       ;; the column of the intersection counting from the upper left corner of the
                  ;; world.  -1 for non-intersection patches.
  my-phase        ;; the phase for the intersection.  -1 for non-intersection patches.
  auto?           ;; whether or not this intersection will switch automatically.
                  ;; false for non-intersection patches.
]

to setup
  clear-all
  setup-globals

  ;; First we ask the patches to draw themselves and set up a few variables
  setup-patches

  set-default-shape turtles "car"

  ;; Setup turtles and determine which one are GPS enabled or not
  setup-allCars

;;  ask turtles [ set-car-speed ]

  reset-ticks
end

to setup-allCars
  create-turtles num-cars
  [
    ;ifelse Same-Starting-Point  ;set cars starting from the top-right
    ;[
    ;  setxy 30 30
    ;  set heading 225
    ;]
    ;[                           ;Or set cars randomly along top row
    ;  setxy random-xcor 30
    ;  set heading 270
    ;]
    
    setxy 30 30
    set speed 0

    ;; MAKE CARS APPEAR ONE BY ONE?
    set wait-time 0                            ;;RANDOMISE?????

    ;; Set Initial Heading
    ;;RANDOMLY ASSIGN CARS WHO ARE GPS AND NON-GPS through "gps-cars-percentage" slider
    ;; GPS enabled cars are red, non-gps cars are blue
    ifelse (random-float 100 < gps-cars-percentage)
    [
      set hasGPS? true
      set color red
      ifelse(random-float 100 < 50)
      [set heading 180]
      [set heading 270]
    ]
    [
      set hasGPS? false
      set color blue
      set heading 225
    ]


    ;;record-data
  ]
end

to setup-globals
  set count-reached 0
  set ticks-per-cycle 20
  set speed-limit 1
  set current-light nobody ;; just for now, since there are no lights yet
  set phase 0

  set grid-size-x 5
  set grid-size-y 5
  set grid-size-x2 7
  set grid-size-y2 3
  set num-cars-stopped 0

  set grid-x-inc world-width / grid-size-x
  set grid-y-inc world-height / grid-size-y
  set grid-x-inc2 world-width / grid-size-x2
  set grid-y-inc2 world-height / grid-size-y2
  ;; don't make acceleration 0.1 since we could get a rounding error and end up on a patch boundary
  set acceleration 0.099
end

to setup-patches
  ;; initialize the patch-owned variables and color the patches to a base-color
  ask patches
  [
    set intersection? false
    set auto? false
    set green-light-up? true
    set my-row -1
    set my-column -1
    set my-phase -1
    set pcolor brown + 3
  ]

  set roads patches with
      [(pxcor = -30) or (pxcor = 30) or (pxcor = -29) or (pxcor = 29) or
        (pycor = -30) or (pycor = 30) or (pycor = -29) or (pycor = 29) or
        (pxcor = pycor) or (pxcor = pycor - 1) or (pxcor = pycor + 1) or (pxcor = pycor - 2) or (pxcor = pycor + 2)
  ]

  ;;ask patches
  ;;[ifelse pxcor < 0
;;    [set roads patches with
      ;;[(floor(pxcor mod grid-x-inc) = 0) or
;;        (floor(pycor mod grid-y-inc) = 0)]
    ;;]
    ;;[set roads patches with
;;      [(pxcor = pycor) or (pxcor = pycor - 10)]
    ;;]
  ;;]

  set intersections roads with
      [((pxcor = -10) and (pycor = -10)) or ((pxcor = 5) and (pycor = -10)) or ((pxcor = 15) and (pycor = -10)) or ((pxcor = -25) and (pycor = -10)) or
 ((pxcor = -10) and (pycor = 20)) or ((pxcor = 5) and (pycor = 20)) or ((pxcor = 15) and (pycor = 20)) or ((pxcor = -25) and (pycor = 20)) or
  ((pxcor = -10) and (pycor = 15)) or ((pxcor = 5) and (pycor = 15)) or ((pxcor = 15) and (pycor = 15)) or ((pxcor = -25) and (pycor = 150)) or ((pxcor = pycor - 30) and (pycor = 5))
  or ((pxcor = pycor) and (pycor = 5)) or ((pxcor + pycor = 30) and (pycor = 5))]

  ask roads [ set pcolor white ]
  ask intersections [set pcolor green]
  setup-intersections

end

to setup-intersections
  ask intersections
  [
    set intersection? true
    set green-light-up? true
    set my-phase 0
    set auto? true
    set my-row floor((pycor + max-pycor) / grid-y-inc)
    set my-column floor((pxcor + max-pxcor) / grid-x-inc)
    set-signal-colors
  ]
end

to set-signal-colors  ;; intersection (patch) procedure
  ifelse power?
  [
    ifelse green-light-up?
    [
      ask patch-at -1 0 [ set pcolor red ]
      ask patch-at 0 1 [ set pcolor green ]
    ]
    [
      ask patch-at -1 0 [ set pcolor green ]
      ask patch-at 0 1 [ set pcolor red ]
    ]
  ]
  [
    ask patch-at -1 0 [ set pcolor white ]
    ask patch-at 0 1 [ set pcolor white ]
  ]
end

;;ask patches [
  ;;let choice random 4
  ;;(ifelse
;;    choice = 0 [
  ;;    set pcolor red
    ;;  set plabel "r"
    ;]
    ;;choice = 1 [
      ;;set pcolor blue
      ;;set plabel "b"
    ;;;]
    ;;choice = 2 [

;      set pcolor green
 ;     set plabel "g"
  ;  ]
   ; ; elsecommands
    ;[
     ; set pcolor yellow
      ;set plabel "y"
  ;;])
;;]

to go
  ;;update-current

  ;; have the intersections change their color
  set-signals
  set num-cars-stopped 0

  ;; set turtles speed (if they reach destination or not)
  ;; move GPS and non-GPS cars according to both algorithms
  ;; the aim is to get to the destination (bottom left corner)
  ask turtles [
    set-car-speed            ;; implement

    ifelse(hasGPS?)
    [
      move-GPSCars
    ]
    [
      move-nonGPSCars
    ]

    move-a-turtle (pxcor + dx) (pycor + dy)
    ifelse(pycor <= -30)
    [set heading 270]
    []
    ifelse(pxcor <= -30)
    [set heading 180]
    []

    ifelse(pycor < -20 or pxcor < -20)
    [move-a-turtle (0) (0)]
    []
    
    ;;record-data
    ;;set-car-color

    ;; IF TURTLE AT INTERSECTION

  ]
  ;; update the phase and the global clock
  next-phase
  tick
end


to set-signals
  ask intersections with [auto? and phase = floor ((my-phase * ticks-per-cycle) / 100)]
  [
    set green-light-up? (not green-light-up?)
    set-signal-colors
  ]
end

to set-car-speed  ;; turtle procedure
  ifelse pcolor = red
  [ set speed 0 ]
  [
    ifelse ((pxcor = -30 and pycor = -30) or (pxcor = -30 and pycor = -29) or (pxcor = -29 and pycor = -29) or (pxcor = -29 and pycor = -30))
    [set speed 0
     set reached-destination 1
      set count-reached count-reached + count turtles with [reached-destination = 1]
      die
    ]
    [set speed 1]
  ]
end


;;Change direction of nonGPS cars based on their location - the aim is to get to the destination
to move-nonGPSCars
;;;

end

to move-GPSCars



end


to move-a-turtle [posx posy]
  ifelse not any? other turtles-on patch-ahead 1
    [fd speed]
    [fd 0 ]
end

;;to set-speed [ delta-x delta-y ]  ;; turtle procedure
  ;; get the turtles on the patch in front of the turtle
  ;;let turtles-ahead turtles-at delta-x delta-y

  ;; if there are turtles in front of the turtle, slow down
  ;; otherwise, speed up
  ;;ifelse any? turtles-ahead
  ;;[
   ;; ifelse any? (turtles-ahead [ up-car? != [up-car?] of myself ])
    ;;[
     ;; set speed 0
   ;; ]
    ;;[
     ;; set speed [speed] of one-of turtles-ahead
      ;;slow-down
   ;; ]
 ;; ]
  ;;[ speed-up ]
;;end

;; decrease the speed of the turtle
to slow-down  ;; turtle procedure
  ifelse speed <= 0  ;;if speed < 0
  [ set speed 0 ]
  [ set speed speed - acceleration ]
end

;; increase the speed of the turtle
to speed-up  ;; turtle procedure
  ifelse speed > speed-limit
  [ set speed speed-limit ]
  [ set speed speed + acceleration ]
end

to next-phase
  ;; The phase cycles from 0 to ticks-per-cycle, then starts over.
  set phase phase + 1
  if phase mod ticks-per-cycle = 0
    [ set phase 0 ]
end