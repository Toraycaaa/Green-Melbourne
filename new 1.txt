globals
[
  nb-infected-previous  ;; Number of infected people at the previous tick
  beta-n                ;; The average number of new secondary
                        ;; infections per infected this tick
  gamma                 ;; The average number of new recoveries
                        ;; per infected this tick
  r0                    ;; The number of secondary infections that arise
                        ;; due to a single infected introduced in a wholly
                        ;; susceptible population
  never-infected        ;; number of people never been infected
  no_mask_survived      ;; number of people without mask never been infected
]

turtles-own
[
  masked?             ;; If true, the person is wearing a mask
  infected?           ;; If true, the person is infected
  cured?              ;; If true, the person has lived through an infection.
                      ;; They cannot be re-infected.
  susceptible?        ;; Tracks whether the person was initially susceptible
  infection-length    ;; How long the person has been infected
  recovery-time       ;; Time (in hours) it takes before the person has a chance to recover from the infection
  nb-infected         ;; Number of secondary infections caused by an
                      ;; infected person at the end of the tick
  nb-recovered        ;; Number of recovered people at the end of the tick
]


;;;
;;; SETUP PROCEDURES
;;;

to setup
  clear-all
  setup-people
  reset-ticks
end


to setup-people
  create-turtles initial-people
  [
    setxy random-xcor random-ycor
    set cured? false
    set infected? false
    set susceptible? true
    set masked? false

    set shape "person"
    set color white

    ;; Set the recovery time for each agent to fall on a
    ;; normal distribution around average recovery time
    set recovery-time random-normal average-recovery-time average-recovery-time / 4

    ;; make sure it lies between 0 and 2x average-recovery-time
    if recovery-time > average-recovery-time * 2 [
      set recovery-time average-recovery-time * 2
    ]
    if recovery-time < 0 [ set recovery-time 0 ]

    ;; Each individual has a 5% chance of starting out infected.
    ;; To mimic true KM conditions use "ask one-of turtles" instead.
    if (random-float 100 < 5)
    [
      set infected? true
      set susceptible? false
      set infection-length random recovery-time
    ]
    if (random-float 100 < people-with-mask-percentage)
    [
      set masked? true
      set color 5
    ]
    assign-color
  ]
end

;; Different people are displayed in 3 different colors depending on health
;; White is neither infected nor cured (set at beginning)
;; Green is a cured person
;; Red is an infected person

to assign-color  ;; turtle procedure
  if infected?
    [
      set color red
      if masked? [ set color 17 ]
    ]
  if cured?
    [ set color green ]
end


;;;
;;; GO PROCEDURES
;;;


to go
  if all? turtles [ not infected? ]
    [ stop ]

  ask turtles
    [ move
      clear-count ]

  ask turtles with [ infected? and masked? ]
    [ infect-with-mask
      maybe-recover ]

  ask turtles with [ infected? and not masked? ]
    [ infect-without-mask
      maybe-recover ]

  ask turtles
    [ assign-color
      calculate-r0 ]

  tick
end


;; People move about at random.
to move  ;; turtle procedure
  rt random-float 360
  fd 1
end

to clear-count
  set nb-infected 0
  set nb-recovered 0
end

;; Infection can occur to any susceptible person nearby
to infect-with-mask  ;; turtle procedure
   let nearby-uninfected (turtles-on neighbors)
     with [ not infected? and not cured? ]

     if nearby-uninfected != nobody
     [ ask nearby-uninfected
       [ if random-float 100 < infection-chance and random-float 1000 >= mask-prevention-chance
         [
           if masked? and random-float 1000 >= mask-prevention-chance or not masked?
           [
             set infected? true
             set nb-infected (nb-infected + 1)
           ]
         ]
       ]
     ]
end

to infect-without-mask  ;; turtle procedure
   let nearby-uninfected (turtles-on neighbors)
     with [ not infected? and not cured? ]

     if nearby-uninfected != nobody
     [ ask nearby-uninfected
       [ if random-float 100 < infection-chance
         [
           if masked? and random-float 1000 >= mask-prevention-chance or not masked?
           [
             set infected? true
             set nb-infected (nb-infected + 1)
           ]
         ]
       ]
     ]
end

to maybe-recover
  set infection-length infection-length + 1

  ;; If people have been infected for more than the recovery-time
  ;; then there is a chance for recovery
  if infection-length > recovery-time
  [
    if random-float 100 < recovery-chance
    [ set infected? false
      set cured? true
      set nb-recovered (nb-recovered + 1)
    ]
  ]
end


to calculate-r0
  set never-infected count turtles with [ not infected? and not cured?]
  set no_mask_survived count turtles with [ not infected? and not cured? and not masked?]
  let new-infected sum [ nb-infected ] of turtles
  let new-recovered sum [ nb-recovered ] of turtles

  ;; Number of infected people at the previous tick:
  set nb-infected-previous
    count turtles with [ infected? ] +
    new-recovered - new-infected

  ;; Number of susceptibles now:
  let susceptible-t
    initial-people -
    count turtles with [ infected? ] -
    count turtles with [ cured? ]

  ;; Initial number of susceptibles:
  let s0 count turtles with [ susceptible? ]

  ifelse nb-infected-previous < 10
  [ set beta-n 0 ]
  [
    ;; This is beta-n, the average number of new
    ;; secondary infections per infected per tick
    set beta-n (new-infected / nb-infected-previous)
  ]

  ifelse nb-infected-previous < 10
  [ set gamma 0 ]
  [
    ;; This is the average number of new recoveries per infected per tick
    set gamma (new-recovered / nb-infected-previous)
  ]

  ;; Prevent division by 0:
  if initial-people - susceptible-t != 0 and susceptible-t != 0
  [
    ;; This is derived from integrating dI / dS = (beta*SI - gamma*I) / (-beta*SI):
    set r0 (ln (s0 / susceptible-t) / (initial-people - susceptible-t))
    ;; Assuming one infected individual introduced in the beginning,
    ;; and hence counting I(0) as negligible, we get the relation:
    ;; N - gamma*ln(S(0)) / beta = S(t) - gamma*ln(S(t)) / beta,
    ;; where N is the initial 'susceptible' population
    ;; Since N >> 1
    ;; Using this, we have R_0 = beta*N / gamma = N*ln(S(0)/S(t)) / (K-S(t))
    set r0 r0 * s0 ]
end


; Copyright 2011 Uri Wilensky.
; See Info tab for full copyright and license.